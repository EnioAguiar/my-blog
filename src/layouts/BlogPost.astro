---
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'
import { getCollection } from 'astro:content'
import BaseHead from '../components/BaseHead.astro'
import Footer from '../components/Footer.astro'
import FormattedDate from '../components/FormattedDate.astro'
import Header from '../components/Header.astro'
import PostCard from '../components/PostCard.astro'
import ShareButtons from '../components/ShareButtons.astro'
import Giscus from '../components/Giscus.astro'
import { t, getTag } from '../i18n/ui'

type Props = CollectionEntry<'blog'>['data'] & {
	slug: CollectionEntry<'blog'>['slug']
	id: CollectionEntry<'blog'>['id']
}

const { title, description, pubDate, updatedDate, heroImage, tags = [], id } = Astro.props

// 1. Get all posts
const allPosts = await getCollection('blog')

// 2. Find related posts, excluding the current post
const relatedPosts = allPosts
	.map((post) => {
		if (post.id === id || !post.data.tags) {
			return { post, score: 0 }
		}
		const sharedTags = post.data.tags.filter((tag: string) => tags.includes(tag))
		return { post, score: sharedTags.length }
	})
	.filter((item) => item.score > 0)
	.sort((a, b) => b.score - a.score)
	.slice(0, 3)
	.map((item) => item.post)
---

<html lang="en">
	<head>
		<BaseHead
			title={title}
			description={description}
			image={heroImage}
			pubDate={pubDate}
			updatedDate={updatedDate}
			isBlogPost={true}
		/>
		<style>
			main {
				width: auto;
				padding: 0;
			}
			.hero-image {
				width: 100%;
				margin-top: 2rem;
				aspect-ratio: 2 / 1;
				overflow: hidden;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em 0;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 2em;
				padding: 1em 1em 0 1em;
				text-align: center;
				line-height: 1.2;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--black));
			}
			.last-updated-on {
				font-style: italic;
			}
			.content {
				padding: 0 1em;
			}
			.tags-container {
				margin-top: 2rem;
				padding: 0 1em;
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				justify-content: center;
			}
			.tag {
				font-size: 0.9rem;
				color: rgb(var(--black));
				background-color: transparent;
				padding: 0;
				border: none;
				text-decoration: none;
				margin-right: 0.5rem; /* Garante o espa√ßamento */
			}
			.tag:hover {
				color: var(--green-bright);
			}
			.related-posts-container {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: 2rem auto;
				padding: 1em;
			}

			.related-posts-container h2 {
				text-align: center;
				margin-bottom: 2rem;
				font-size: 1.8rem;
			}

			.related-posts-list {
				display: grid;
				grid-template-columns: 1fr;
				gap: 2rem;
				padding: 0;
				list-style-type: none;
			}

			@media (min-width: 768px) {
				.related-posts-list {
					grid-template-columns: repeat(3, 1fr);
				}
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image">
					{
						heroImage && (
							<Image
								width={1020}
								height={574}
								src={heroImage}
								alt={title}
								class="h-full w-full object-cover"
							/>
						)
					}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<div class="content">
						<slot />
					</div>

					<!-- Tags Section -->
					{
						tags && tags.length > 0 && (
							<div class="tags-container">
								<div class="tags">
									{tags.map((tagKey) => {
										const tag = getTag(tagKey)
										return (
											<a href={`/categories/${tag.slug}/`} class="tag">
												#{tag.name}
											</a>
										)
									})}
								</div>
							</div>
						)
					}

					<!-- Share Section -->
					<ShareButtons title={title} slug={Astro.props.slug} />
				</div>
			</article>

			<!-- Related Posts Section -->
			{
				relatedPosts.length > 0 && (
					<div class="related-posts-container">
						<h2>{t('posts.related')}</h2>
						<ul class="related-posts-list">
							{relatedPosts.map((relatedPost, i) => (
								<PostCard post={relatedPost} number={(i + 1).toString()} />
							))}
						</ul>
					</div>
				)
			}
			<Giscus />
		</main>
		<Footer />
	</body>
</html>
