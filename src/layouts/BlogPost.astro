---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';
import PostCard from '../components/PostCard.astro';
import { ui, defaultLang } from '../i18n/ui';

type Props = CollectionEntry<'blog'>['data'] & {
	slug: CollectionEntry<'blog'>['slug'];
	id: CollectionEntry<'blog'>['id'];
};

const { title, description, pubDate, updatedDate, heroImage, tags = [], id } = Astro.props;

// Extrai o idioma do ID do post (ex: "en/my-post" -> "en")
const lang = id.split('/')[0] as keyof typeof ui;

// Função para obter o nome e slug traduzido de uma tag
function getTranslatedTag(tagKey: string) {
    const name = ui[lang]?.[`tags.${tagKey}.name`] || tagKey;
    const slug = ui[lang]?.[`tags.${tagKey}.slug`] || tagKey;
    return { name, slug };
}

const t = ui[lang];
const categoriesSlug = t['nav.categories.slug'];

// 1. Obter todos os posts do idioma atual
const allPosts = await getCollection('blog', ({ id }) => id.startsWith(`${lang}/`));

// 2. Encontrar posts relacionados, excluindo o post atual
const relatedPosts = allPosts
	.filter((post) => {
		if (post.id === id) return false; // Exclui o próprio post
		if (!tags || tags.length === 0) return false; // Se o post atual não tem tags, não há relacionados
		// Retorna posts que compartilham pelo menos uma tag
		return post.data.tags?.some((tag: string) => tags.includes(tag));
	})
	.slice(0, 3); // Limita a 3 posts relacionados
---

<html lang={lang}>
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: auto;
				padding: 0;
			}
			.hero-image {
				width: 100%;
				margin-top: 2rem;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
			.prose {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 1em 0;
				color: rgb(var(--gray-dark));
			}
			.title {
				margin-bottom: 2em;
				padding: 1em 1em 0 1em;
				text-align: center;
				line-height: 1.2;
			}
			.title h1 {
				margin: 0 0 0.5em 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: rgb(var(--black));
			}
			.last-updated-on {
				font-style: italic;
			}
			.content {
				padding: 0 1em;
			}
			.tags-container {
				margin-top: 2rem;
				padding: 0 1em;
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				justify-content: center;
			}
			.tag {
				font-size: 0.9rem;
				color: rgb(var(--black));
				background-color: transparent;
				padding: 0;
				border: none;
				text-decoration: none;
				margin-right: 0.5rem; /* Garante o espaçamento */
			}
			.tag:hover {
				color: var(--green-bright);
			}
			.related-posts-container {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: 2rem auto;
				padding: 1em;
			}

			.related-posts-container h2 {
				text-align: center;
				margin-bottom: 2rem;
				font-size: 1.8rem;
			}

			.related-posts-list {
				display: grid;
				grid-template-columns: 1fr;
				gap: 2rem;
				padding: 0;
				list-style-type: none;
			}

			@media (min-width: 768px) {
				.related-posts-list {
					grid-template-columns: repeat(3, 1fr);
				}
			}
		</style>
	</head>

	<body>
		<Header lang={lang} />
		<main>
			<article>
				<div class="hero-image">
					{
						heroImage && (
							<Image
								width={1020}
								src={heroImage}
								alt={title}
								class="object-cover w-full h-full"
							/>
						)
					}
				</div>
				<div class="prose">
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
						<hr />
					</div>
					<div class="content">
						<slot />
					</div>

					<!-- Seção de Tags -->
					{
						tags && tags.length > 0 && (
							<div class="tags-container">
								<div class="tags">
									{tags.map((tagKey) => {
										const translatedTag = getTranslatedTag(tagKey);
										return (
											<a
												href={`/${lang}/${categoriesSlug}/${translatedTag.slug}/`}
												class="tag"
											>
												#{translatedTag.name}
											</a>
										);
									})}
								</div>
							</div>
						)
					}
				</div>
			</article>

			<!-- Seção de Posts Relacionados -->
			{
				relatedPosts.length > 0 && (
					<div class="related-posts-container">
						<h2>{t['posts.related']}</h2>
						<ul class="related-posts-list">
							{relatedPosts.map((relatedPost, i) => (
								<PostCard post={relatedPost} number={(i + 1).toString()} />
							))}
						</ul>
					</div>
				)
			}
		</main>
		<Footer />
	</body>
</html>
