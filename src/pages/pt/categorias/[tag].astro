---
import { getCollection, type CollectionEntry } from 'astro:content';
import BaseHead from '../../../components/BaseHead.astro';
import Footer from '../../../components/Footer.astro';
import Header from '../../../components/Header.astro';
import FormattedDate from '../../../components/FormattedDate.astro';
import { Image } from 'astro:assets';
import { ui } from '../../../i18n/ui';

export async function getStaticPaths() {
	const allPosts = await getCollection('blog', ({ id }) => id.startsWith('pt/'));
	const uniqueTagKeys = [...new Set(allPosts.flatMap(post => post.data.tags || []))];

	return uniqueTagKeys.map((tagKey) => {
		const tagName = ui.pt[`tags.${tagKey}.name`] || tagKey;
		const tagSlug = ui.pt[`tags.${tagKey}.slug`] || tagKey;

		const filteredPosts = allPosts.filter((post) =>
			(post.data.tags || []).includes(tagKey)
		);

		return {
			params: { tag: tagSlug },
			props: { 
				posts: filteredPosts,
				tagKey: tagKey,
				tagName: tagName,
			},
		};
	});
}

const { tag } = Astro.params;
const { posts, tagName } = Astro.props as { posts: CollectionEntry<'blog'>[], tagName: string };

// Função para obter o nome traduzido de uma tag
function getTranslatedTag(tagKey: string, lang: 'pt' | 'en') {
    const name = ui[lang]?.[`tags.${tagKey}.name`] || tagKey;
    const slug = ui[lang]?.[`tags.${tagKey}.slug`] || tagKey;
    return { name, slug };
}
---

<!doctype html>
<html lang="pt-BR">
	<head>
		<BaseHead
			title={`Posts sobre ${tagName}`}
			description={`Todos os posts sobre o tema ${tagName}`}
		/>
		<style>
			main {
				width: 960px;
			}
			h1 {
				text-align: center;
				margin-bottom: 2rem;
				text-transform: capitalize;
			}
			h1 .tag-name {
				color: var(--green);
			}
			.posts-grid ul {
				display: flex;
				flex-wrap: wrap;
				gap: 4rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			.posts-grid li {
				width: calc(50% - 2rem);
				position: relative;
			}
			.posts-grid li::before {
				content: attr(data-post-number);
				position: absolute;
				top: -0.75rem;
				left: -0.75rem;
				background-color: var(--green);
				color: #000000;
				font-size: 1rem;
				font-weight: 700;
				padding: 0.25rem 0.75rem;
				border-radius: 12px;
				line-height: 1.5;
				z-index: 1;
			}
			.posts-grid li * {
				text-decoration: none;
				transition: 0.2s ease;
			}
			.posts-grid li img {
				margin-bottom: 0.5rem;
				border-radius: 12px;
			}
			.posts-grid li a {
				display: block;
			}
			.title {
				margin: 0;
				color: rgb(var(--black));
				line-height: 1;
			}
			.date {
				margin: 0;
				color: rgb(var(--black));
			}
			.description {
				margin: 0.5rem 0 0;
				color: rgb(var(--gray-dark));
				font-size: 0.9rem;
			}
			.tags {
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
				margin-top: 1rem;
			}
			.tag {
				font-size: 0.9rem;
				color: rgb(var(--black));
				background-color: transparent;
				padding: 0;
				border: none;
			}
			.posts-grid li a:hover .title,
			.posts-grid li a:hover .description,
			.posts-grid li a:hover .date,
			.posts-grid li a:hover .tags {
				color: var(--green-bright);
			}
			.posts-grid a:hover img {
				box-shadow: var(--box-shadow);
			}
			@media (max-width: 720px) {
				.posts-grid ul {
					gap: 0.5em;
				}
				.posts-grid li {
					width: 100%;
					text-align: center;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<h1>Posts com a categoria: <span class="tag-name">#{tagName}</span></h1>
			<section class="posts-grid">
				<ul>
					{
						posts.map((post, i) => (
							<li data-post-number={i + 1}>
								<a href={`/blog/${post.id}/`}>
									{post.data.heroImage && (
										<Image width={720} height={360} src={post.data.heroImage} alt="" />
									)}
									<h4 class="title">{post.data.title}</h4>
									<p class="description">{post.data.description}</p>
									<p class="date">
										<FormattedDate date={post.data.pubDate} />
									</p>
									{post.data.tags && (
										<div class="tags">
											{post.data.tags.map((t) => {
												const translatedTag = getTranslatedTag(t, 'pt');
												return <span class="tag">#{translatedTag.name}</span>
											})}
										</div>
									)}
								</a>
							</li>
						))
					}
				</ul>
			</section>
		</main>
		<Footer />
	</body>
</html>
