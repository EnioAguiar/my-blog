---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';

// 1. Obter todos os posts em português
const posts = await getCollection('blog', ({ id }) => id.startsWith('pt/'));

// 2. Contar as ocorrências de cada tag
const tagCounts: Record<string, number> = {};
posts.forEach((post) => {
	if (Array.isArray(post.data.tags)) {
		post.data.tags.forEach((tag: unknown) => {
			if (typeof tag === 'string' && tag.trim() !== '') {
				const cleanTag = tag.trim();
				tagCounts[cleanTag] = (tagCounts[cleanTag] || 0) + 1;
			}
		});
	}
});

// 3. Ordenar tags alfabeticamente para uma ordem consistente na nuvem
const sortedTags = Object.keys(tagCounts).sort();

// 4. Preparar dados para o tamanho da fonte na Nuvem
const counts = Object.values(tagCounts);
const minCount = Math.min(...counts);
const maxCount = Math.max(...counts);
const minFontSize = 16; // em pixels
const maxFontSize = 48; // em pixels

function getFontSize(count: number) {
	// Se todas as tags têm a mesma contagem, retorna um tamanho médio.
	if (maxCount === minCount) {
		return (minFontSize + maxFontSize) / 2;
	}
	// Caso contrário, calcula o tamanho proporcional.
	return (
		minFontSize +
		((count - minCount) * (maxFontSize - minFontSize)) / (maxCount - minCount)
	);
}

// 5. Função para formatar a contagem de posts
function formatCount(count: number): string {
	if (count >= 1000) {
		return (count / 1000).toFixed(1).replace(/\.0$/, '') + 'k';
	}
	return count.toString();
}
---

<!doctype html>
<html lang="pt-BR">
	<head>
		<BaseHead title={`Categorias - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 3em 1em;
			}
			h1 {
				text-align: center;
				margin-bottom: 2em;
			}
			.tag-cloud {
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				align-items: center;
				gap: 2rem 1.5rem;
				text-align: center;
				padding: 1rem;
			}
			.cloud-tag {
				text-decoration: none;
				color: rgb(var(--gray-dark));
				transition: color 0.2s ease-in-out;
				line-height: 1.2; /* Ajusta o espaçamento entre linhas */
				display: flex;
				flex-direction: column;
				align-items: center;
			}
			.cloud-tag:hover {
				color: var(--green);
			}
			.cloud-tag .tag-name {
				display: block; /* Garante que o nome da tag fique em sua própria linha dentro do link */
			}
			.cloud-tag .post-count {
				font-size: 0.75rem;
				color: rgb(var(--gray));
				margin-top: 0.1em; /* Aproxima a contagem do nome da tag */
				display: block; /* Garante que a contagem fique em sua própria linha dentro do link */
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<h1>Nuvem de Categorias</h1>

			<div class="tag-cloud">
				{
					sortedTags.map((tag) => (
						<a
							href={`/pt/categorias/${tag}`}
							class="cloud-tag"
							style={`font-size: ${getFontSize(tagCounts[tag])}px;`}
						>
							<span class="tag-name">{tag}</span>
							<span class="post-count">
								{formatCount(tagCounts[tag])} post(s)
							</span>
						</a>
					))
				}
			</div>
		</main>
		<Footer />
	</body>
</html>
