---
import { getCollection } from 'astro:content';
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import Header from '../../components/Header.astro';
import { SITE_DESCRIPTION, SITE_TITLE } from '../../consts';
import { ui } from '../../i18n/ui';

const lang = 'pt';

// 1. Obter todos os posts em português
const posts = await getCollection('blog', ({ id }) => id.startsWith(`${lang}/`));

// 2. Contar as ocorrências de cada CHAVE de tag
const tagKeyCounts: Record<string, number> = {};
posts.forEach((post) => {
	if (Array.isArray(post.data.tags)) {
		post.data.tags.forEach((tagKey: string) => {
			if (tagKey.trim() !== '') {
				tagKeyCounts[tagKey] = (tagKeyCounts[tagKey] || 0) + 1;
			}
		});
	}
});

// 3. Mapear chaves para dados traduzidos e contagens
const tagsData = Object.keys(tagKeyCounts).map(tagKey => {
    const name = ui[lang]?.[`tags.${tagKey}.name`] || tagKey;
    const slug = ui[lang]?.[`tags.${tagKey}.slug`] || tagKey;
    return {
        name,
        slug,
        count: tagKeyCounts[tagKey]
    };
}).sort((a, b) => a.name.localeCompare(b.name)); // Ordenar pelo nome traduzido

// 4. Preparar dados para o tamanho da fonte na Nuvem
const counts = tagsData.map(tag => tag.count);
const minCount = Math.min(...counts);
const maxCount = Math.max(...counts);
const minFontSize = 16; // em pixels
const maxFontSize = 48; // em pixels

function getFontSize(count: number) {
	if (maxCount === minCount) {
		return (minFontSize + maxFontSize) / 2;
	}
	return minFontSize + ((count - minCount) * (maxFontSize - minFontSize)) / (maxCount - minCount);
}
---

<!doctype html>
<html lang="pt-BR">
	<head>
		<BaseHead title={`Categorias - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 720px;
				max-width: calc(100% - 2em);
				margin: auto;
				padding: 3em 1em;
			}
			h1 {
				text-align: center;
				margin-bottom: 2em;
			}
			.tag-cloud {
				display: flex;
				flex-wrap: wrap;
				justify-content: center;
				align-items: center;
				gap: 2rem 1.5rem;
				text-align: center;
				padding: 1rem;
			}
			.cloud-tag {
				text-decoration: none;
				color: rgb(var(--gray-dark));
				transition: color 0.2s ease-in-out;
				line-height: 1.2;
				display: flex;
				flex-direction: column;
				align-items: center;
			}
			.cloud-tag:hover {
				color: var(--green);
			}
			.cloud-tag .tag-name {
				display: block;
			}
			.cloud-tag .post-count {
				font-size: 0.75rem;
				color: rgb(var(--gray));
				margin-top: 0.1em;
				display: block;
			}
		</style>
	</head>
	<body style="display: flex; flex-direction: column; min-height: 100vh;">
		<Header />
		<main style="flex-grow: 1;">
			<h1>Nuvem de Categorias</h1>

			<div class="tag-cloud">
				{
					tagsData.map((tag) => (
						<a
							href={`/pt/categorias/${tag.slug}`}
							class="cloud-tag"
							style={`font-size: ${getFontSize(tag.count)}px;`}
						>
							<span class="tag-name">{tag.name}</span>
							<span class="post-count">
								{tag.count} post(s)
							</span>
						</a>
					))
				}
			</div>
		</main>
		<Footer />
	</body>
</html>