---
import { getCollection } from 'astro:content'
import BaseHead from '../components/BaseHead.astro'
import Footer from '../components/Footer.astro'
import FormattedDate from '../components/FormattedDate.astro'
import Header from '../components/Header.astro'
import PostCard from '../components/PostCard.astro'
import { SITE_DESCRIPTION, SITE_TITLE } from '../consts'
import { Image } from 'astro:assets'
import { t, getTag } from '../i18n/ui'

export async function getStaticPaths({ paginate }) {
	const posts = (await getCollection('blog')).sort(
		(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
	)

	return paginate(posts, { pageSize: 9 })
}

const { page } = Astro.props

const isFirstPage = page.currentPage === 1
const featuredPost = isFirstPage ? page.data[0] : null
const otherPosts = isFirstPage ? page.data.slice(1) : page.data

const pageTitle = isFirstPage ? SITE_DESCRIPTION : `${SITE_TITLE} - Page ${page.currentPage}`
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={pageTitle} description={SITE_DESCRIPTION} />
		<style>
			main {
				width: 960px;
			}

			.featured-post {
				margin-bottom: 4rem;
				border-bottom: 1px solid #ffffff; /* Linha branca e mais grossa */
				padding-bottom: 2rem;
				position: relative; /* Necessário para o posicionamento da etiqueta */
			}

			.featured-post a {
				text-decoration: none;
				display: block;
			}

			.featured-post img {
				border-radius: 12px;
				margin-bottom: 1.5rem;
				width: 100%;
				aspect-ratio: 2 / 1; /* Define a proporção da imagem */
				object-fit: cover; /* Garante que a imagem cubra a área sem distorcer */
			}

			.featured-post .content {
				padding: 0 1rem;
			}

			.featured-post .title {
				font-size: 2.5rem;
				color: rgb(var(--black));
				line-height: 1.1;
			}

			.featured-post .description {
				font-size: 1.1rem;
				color: rgb(var(--gray-dark));
				margin-top: 0.5rem;
			}

			.featured-post .date {
				margin-top: 1rem;
				color: rgb(var(--black));
			}

			.featured-post .tags {
				margin-top: 1rem;
				padding: 0 1rem; /* Adiciona o mesmo padding do content */
				display: flex;
				flex-wrap: wrap;
			}

			.featured-post .tag {
				font-size: 1rem;
				color: rgb(var(--black));
				text-decoration: none;
				margin-right: 0.5rem;
				display: inline-block; /* Garante que fiquem na mesma linha */
			}

			.featured-post a:hover .title,
			.featured-post a:hover .description,
			.featured-post a:hover .date {
				color: var(--green-bright);
			}

			.featured-post .tag:hover {
				/* Seletor corrigido para o link da tag */
				color: var(--green-bright);
			}

			.posts-grid ul {
				display: flex;
				flex-wrap: wrap;
				gap: 4rem;
				list-style-type: none;
				margin: 0;
				padding: 0;
			}
			.posts-grid :global(li) {
				width: calc(50% - 2rem);
			}

			@media (max-width: 720px) {
				.posts-grid ul {
					gap: 0.5em;
				}
				.posts-grid li {
					width: 100%;
					text-align: center;
				}
			}
			.pagination .next {
				margin-left: auto; /* Empurra o botão "Próximo" para a direita */
			}
		</style>
	</head>
	<body style="display: flex; flex-direction: column; min-height: 100vh;">
		<Header />
		<main style="flex-grow: 1;">
			<h1 class="sr-only">{SITE_DESCRIPTION}</h1>
			{
				featuredPost && (
					<section class="featured-post">
						<a href={`/blog/${featuredPost.id}/`}>
							<span class="post-label">1</span>
							{featuredPost.data.heroImage && (
								<Image
									width={1080}
									height={540}
									src={featuredPost.data.heroImage}
									alt={featuredPost.data.title}
								/>
							)}
							<div class="content">
								<h2 class="title">{featuredPost.data.title}</h2>
								<p class="description">{featuredPost.data.description}</p>
								<p class="date">
									<FormattedDate date={featuredPost.data.pubDate} />
								</p>
							</div>
						</a>
						{featuredPost.data.tags && (
							<div class="tags">
								{featuredPost.data.tags.map((tagKey) => {
									const tag = getTag(tagKey)
									return (
										<a href={`/categories/${tag.slug}/`} class="tag">
											#{tag.name}
										</a>
									)
								})}
							</div>
						)}
					</section>
				)
			}

			<section class="posts-grid">
				<ul>
					{
						otherPosts.map((post, i) => (
							<PostCard
								post={post}
								number={(isFirstPage ? i + 2 : page.start + i + 1).toString()}
							/>
						))
					}
				</ul>
			</section>

			<nav class="pagination">
				{
					page.url.prev && (
						<a class="prev" href={page.url.prev}>
							{t('pagination.previous')}
						</a>
					)
				}
				{
					page.url.next && (
						<a class="next" href={page.url.next}>
							{t('pagination.next')}
						</a>
					)
				}
			</nav>
		</main>
		<Footer />
	</body>
</html>